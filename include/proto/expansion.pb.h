// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expansion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_expansion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_expansion_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace valhalla {
class Expansion;
class ExpansionDefaultTypeInternal;
extern ExpansionDefaultTypeInternal _Expansion_default_instance_;
class Expansion_Geometry;
class Expansion_GeometryDefaultTypeInternal;
extern Expansion_GeometryDefaultTypeInternal _Expansion_Geometry_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::Expansion* Arena::CreateMaybeMessage<::valhalla::Expansion>(Arena*);
template<> ::valhalla::Expansion_Geometry* Arena::CreateMaybeMessage<::valhalla::Expansion_Geometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

enum Expansion_EdgeStatus : int {
  Expansion_EdgeStatus_connected = 0,
  Expansion_EdgeStatus_settled = 1,
  Expansion_EdgeStatus_reached = 2,
  Expansion_EdgeStatus_Expansion_EdgeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expansion_EdgeStatus_Expansion_EdgeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expansion_EdgeStatus_IsValid(int value);
constexpr Expansion_EdgeStatus Expansion_EdgeStatus_EdgeStatus_MIN = Expansion_EdgeStatus_connected;
constexpr Expansion_EdgeStatus Expansion_EdgeStatus_EdgeStatus_MAX = Expansion_EdgeStatus_reached;
constexpr int Expansion_EdgeStatus_EdgeStatus_ARRAYSIZE = Expansion_EdgeStatus_EdgeStatus_MAX + 1;

const std::string& Expansion_EdgeStatus_Name(Expansion_EdgeStatus value);
template<typename T>
inline const std::string& Expansion_EdgeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expansion_EdgeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expansion_EdgeStatus_Name.");
  return Expansion_EdgeStatus_Name(static_cast<Expansion_EdgeStatus>(enum_t_value));
}
bool Expansion_EdgeStatus_Parse(
    const std::string& name, Expansion_EdgeStatus* value);
enum Expansion_ExpansionType : int {
  Expansion_ExpansionType_forward = 0,
  Expansion_ExpansionType_reverse = 1,
  Expansion_ExpansionType_Expansion_ExpansionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Expansion_ExpansionType_Expansion_ExpansionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Expansion_ExpansionType_IsValid(int value);
constexpr Expansion_ExpansionType Expansion_ExpansionType_ExpansionType_MIN = Expansion_ExpansionType_forward;
constexpr Expansion_ExpansionType Expansion_ExpansionType_ExpansionType_MAX = Expansion_ExpansionType_reverse;
constexpr int Expansion_ExpansionType_ExpansionType_ARRAYSIZE = Expansion_ExpansionType_ExpansionType_MAX + 1;

const std::string& Expansion_ExpansionType_Name(Expansion_ExpansionType value);
template<typename T>
inline const std::string& Expansion_ExpansionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Expansion_ExpansionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Expansion_ExpansionType_Name.");
  return Expansion_ExpansionType_Name(static_cast<Expansion_ExpansionType>(enum_t_value));
}
bool Expansion_ExpansionType_Parse(
    const std::string& name, Expansion_ExpansionType* value);
// ===================================================================

class Expansion_Geometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Expansion.Geometry) */ {
 public:
  inline Expansion_Geometry() : Expansion_Geometry(nullptr) {};
  virtual ~Expansion_Geometry();

  Expansion_Geometry(const Expansion_Geometry& from);
  Expansion_Geometry(Expansion_Geometry&& from) noexcept
    : Expansion_Geometry() {
    *this = ::std::move(from);
  }

  inline Expansion_Geometry& operator=(const Expansion_Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expansion_Geometry& operator=(Expansion_Geometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Expansion_Geometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expansion_Geometry* internal_default_instance() {
    return reinterpret_cast<const Expansion_Geometry*>(
               &_Expansion_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Expansion_Geometry& a, Expansion_Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Expansion_Geometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expansion_Geometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expansion_Geometry* New() const final {
    return CreateMaybeMessage<Expansion_Geometry>(nullptr);
  }

  Expansion_Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expansion_Geometry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Expansion_Geometry& from);
  void MergeFrom(const Expansion_Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Expansion_Geometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Expansion.Geometry";
  }
  protected:
  explicit Expansion_Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 1,
  };
  // repeated sint32 coords = 1 [packed = true];
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coords(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_coords() const;
  void _internal_add_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_coords();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 coords(int index) const;
  void set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      coords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_coords();

  // @@protoc_insertion_point(class_scope:valhalla.Expansion.Geometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > coords_;
  mutable std::atomic<int> _coords_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expansion_2eproto;
};
// -------------------------------------------------------------------

class Expansion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Expansion) */ {
 public:
  inline Expansion() : Expansion(nullptr) {};
  virtual ~Expansion();

  Expansion(const Expansion& from);
  Expansion(Expansion&& from) noexcept
    : Expansion() {
    *this = ::std::move(from);
  }

  inline Expansion& operator=(const Expansion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expansion& operator=(Expansion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Expansion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Expansion* internal_default_instance() {
    return reinterpret_cast<const Expansion*>(
               &_Expansion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Expansion& a, Expansion& b) {
    a.Swap(&b);
  }
  inline void Swap(Expansion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expansion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Expansion* New() const final {
    return CreateMaybeMessage<Expansion>(nullptr);
  }

  Expansion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Expansion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Expansion& from);
  void MergeFrom(const Expansion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Expansion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Expansion";
  }
  protected:
  explicit Expansion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Expansion_Geometry Geometry;

  typedef Expansion_EdgeStatus EdgeStatus;
  static constexpr EdgeStatus connected =
    Expansion_EdgeStatus_connected;
  static constexpr EdgeStatus settled =
    Expansion_EdgeStatus_settled;
  static constexpr EdgeStatus reached =
    Expansion_EdgeStatus_reached;
  static inline bool EdgeStatus_IsValid(int value) {
    return Expansion_EdgeStatus_IsValid(value);
  }
  static constexpr EdgeStatus EdgeStatus_MIN =
    Expansion_EdgeStatus_EdgeStatus_MIN;
  static constexpr EdgeStatus EdgeStatus_MAX =
    Expansion_EdgeStatus_EdgeStatus_MAX;
  static constexpr int EdgeStatus_ARRAYSIZE =
    Expansion_EdgeStatus_EdgeStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EdgeStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EdgeStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EdgeStatus_Name.");
    return Expansion_EdgeStatus_Name(enum_t_value);
  }
  static inline bool EdgeStatus_Parse(const std::string& name,
      EdgeStatus* value) {
    return Expansion_EdgeStatus_Parse(name, value);
  }

  typedef Expansion_ExpansionType ExpansionType;
  static constexpr ExpansionType forward =
    Expansion_ExpansionType_forward;
  static constexpr ExpansionType reverse =
    Expansion_ExpansionType_reverse;
  static inline bool ExpansionType_IsValid(int value) {
    return Expansion_ExpansionType_IsValid(value);
  }
  static constexpr ExpansionType ExpansionType_MIN =
    Expansion_ExpansionType_ExpansionType_MIN;
  static constexpr ExpansionType ExpansionType_MAX =
    Expansion_ExpansionType_ExpansionType_MAX;
  static constexpr int ExpansionType_ARRAYSIZE =
    Expansion_ExpansionType_ExpansionType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ExpansionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ExpansionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ExpansionType_Name.");
    return Expansion_ExpansionType_Name(enum_t_value);
  }
  static inline bool ExpansionType_Parse(const std::string& name,
      ExpansionType* value) {
    return Expansion_ExpansionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCostsFieldNumber = 1,
    kDurationsFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kEdgeStatusFieldNumber = 4,
    kEdgeIdFieldNumber = 5,
    kPredEdgeIdFieldNumber = 6,
    kGeometriesFieldNumber = 7,
    kExpansionTypeFieldNumber = 8,
  };
  // repeated uint32 costs = 1 [packed = true];
  int costs_size() const;
  private:
  int _internal_costs_size() const;
  public:
  void clear_costs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_costs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_costs() const;
  void _internal_add_costs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_costs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 costs(int index) const;
  void set_costs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_costs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      costs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_costs();

  // repeated uint32 durations = 2 [packed = true];
  int durations_size() const;
  private:
  int _internal_durations_size() const;
  public:
  void clear_durations();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_durations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_durations() const;
  void _internal_add_durations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_durations();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 durations(int index) const;
  void set_durations(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_durations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      durations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_durations();

  // repeated uint32 distances = 3 [packed = true];
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distances() const;
  void _internal_add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distances();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distances(int index) const;
  void set_distances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distances();

  // repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
  int edge_status_size() const;
  private:
  int _internal_edge_status_size() const;
  public:
  void clear_edge_status();
  private:
  ::valhalla::Expansion_EdgeStatus _internal_edge_status(int index) const;
  void _internal_add_edge_status(::valhalla::Expansion_EdgeStatus value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_edge_status();
  public:
  ::valhalla::Expansion_EdgeStatus edge_status(int index) const;
  void set_edge_status(int index, ::valhalla::Expansion_EdgeStatus value);
  void add_edge_status(::valhalla::Expansion_EdgeStatus value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& edge_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_edge_status();

  // repeated uint32 edge_id = 5 [packed = true];
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;
  public:
  void clear_edge_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_edge_id() const;
  void _internal_add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_edge_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_id(int index) const;
  void set_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      edge_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_edge_id();

  // repeated uint32 pred_edge_id = 6 [packed = true];
  int pred_edge_id_size() const;
  private:
  int _internal_pred_edge_id_size() const;
  public:
  void clear_pred_edge_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pred_edge_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_pred_edge_id() const;
  void _internal_add_pred_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_pred_edge_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 pred_edge_id(int index) const;
  void set_pred_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_pred_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      pred_edge_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_pred_edge_id();

  // repeated .valhalla.Expansion.Geometry geometries = 7;
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;
  public:
  void clear_geometries();
  ::valhalla::Expansion_Geometry* mutable_geometries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Expansion_Geometry >*
      mutable_geometries();
  private:
  const ::valhalla::Expansion_Geometry& _internal_geometries(int index) const;
  ::valhalla::Expansion_Geometry* _internal_add_geometries();
  public:
  const ::valhalla::Expansion_Geometry& geometries(int index) const;
  ::valhalla::Expansion_Geometry* add_geometries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Expansion_Geometry >&
      geometries() const;

  // repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
  int expansion_type_size() const;
  private:
  int _internal_expansion_type_size() const;
  public:
  void clear_expansion_type();
  private:
  ::valhalla::Expansion_ExpansionType _internal_expansion_type(int index) const;
  void _internal_add_expansion_type(::valhalla::Expansion_ExpansionType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_expansion_type();
  public:
  ::valhalla::Expansion_ExpansionType expansion_type(int index) const;
  void set_expansion_type(int index, ::valhalla::Expansion_ExpansionType value);
  void add_expansion_type(::valhalla::Expansion_ExpansionType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& expansion_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_expansion_type();

  // @@protoc_insertion_point(class_scope:valhalla.Expansion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > costs_;
  mutable std::atomic<int> _costs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > durations_;
  mutable std::atomic<int> _durations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distances_;
  mutable std::atomic<int> _distances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> edge_status_;
  mutable std::atomic<int> _edge_status_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > edge_id_;
  mutable std::atomic<int> _edge_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > pred_edge_id_;
  mutable std::atomic<int> _pred_edge_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Expansion_Geometry > geometries_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> expansion_type_;
  mutable std::atomic<int> _expansion_type_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expansion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Expansion_Geometry

// repeated sint32 coords = 1 [packed = true];
inline int Expansion_Geometry::_internal_coords_size() const {
  return coords_.size();
}
inline int Expansion_Geometry::coords_size() const {
  return _internal_coords_size();
}
inline void Expansion_Geometry::clear_coords() {
  coords_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expansion_Geometry::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Expansion_Geometry::coords(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.Geometry.coords)
  return _internal_coords(index);
}
inline void Expansion_Geometry::set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.Geometry.coords)
}
inline void Expansion_Geometry::_internal_add_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  coords_.Add(value);
}
inline void Expansion_Geometry::add_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_coords(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.Geometry.coords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Expansion_Geometry::_internal_coords() const {
  return coords_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Expansion_Geometry::coords() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.Geometry.coords)
  return _internal_coords();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Expansion_Geometry::_internal_mutable_coords() {
  return &coords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Expansion_Geometry::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.Geometry.coords)
  return _internal_mutable_coords();
}

// -------------------------------------------------------------------

// Expansion

// repeated uint32 costs = 1 [packed = true];
inline int Expansion::_internal_costs_size() const {
  return costs_.size();
}
inline int Expansion::costs_size() const {
  return _internal_costs_size();
}
inline void Expansion::clear_costs() {
  costs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::_internal_costs(int index) const {
  return costs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::costs(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.costs)
  return _internal_costs(index);
}
inline void Expansion::set_costs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  costs_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.costs)
}
inline void Expansion::_internal_add_costs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  costs_.Add(value);
}
inline void Expansion::add_costs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_costs(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.costs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::_internal_costs() const {
  return costs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::costs() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.costs)
  return _internal_costs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::_internal_mutable_costs() {
  return &costs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::mutable_costs() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.costs)
  return _internal_mutable_costs();
}

// repeated uint32 durations = 2 [packed = true];
inline int Expansion::_internal_durations_size() const {
  return durations_.size();
}
inline int Expansion::durations_size() const {
  return _internal_durations_size();
}
inline void Expansion::clear_durations() {
  durations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::_internal_durations(int index) const {
  return durations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::durations(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.durations)
  return _internal_durations(index);
}
inline void Expansion::set_durations(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  durations_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.durations)
}
inline void Expansion::_internal_add_durations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  durations_.Add(value);
}
inline void Expansion::add_durations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_durations(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.durations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::_internal_durations() const {
  return durations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::durations() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.durations)
  return _internal_durations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::_internal_mutable_durations() {
  return &durations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::mutable_durations() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.durations)
  return _internal_mutable_durations();
}

// repeated uint32 distances = 3 [packed = true];
inline int Expansion::_internal_distances_size() const {
  return distances_.size();
}
inline int Expansion::distances_size() const {
  return _internal_distances_size();
}
inline void Expansion::clear_distances() {
  distances_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::distances(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.distances)
  return _internal_distances(index);
}
inline void Expansion::set_distances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.distances)
}
inline void Expansion::_internal_add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distances_.Add(value);
}
inline void Expansion::add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distances(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::_internal_distances() const {
  return distances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::distances() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.distances)
  return _internal_distances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::_internal_mutable_distances() {
  return &distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.distances)
  return _internal_mutable_distances();
}

// repeated .valhalla.Expansion.EdgeStatus edge_status = 4;
inline int Expansion::_internal_edge_status_size() const {
  return edge_status_.size();
}
inline int Expansion::edge_status_size() const {
  return _internal_edge_status_size();
}
inline void Expansion::clear_edge_status() {
  edge_status_.Clear();
}
inline ::valhalla::Expansion_EdgeStatus Expansion::_internal_edge_status(int index) const {
  return static_cast< ::valhalla::Expansion_EdgeStatus >(edge_status_.Get(index));
}
inline ::valhalla::Expansion_EdgeStatus Expansion::edge_status(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.edge_status)
  return _internal_edge_status(index);
}
inline void Expansion::set_edge_status(int index, ::valhalla::Expansion_EdgeStatus value) {
  edge_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.edge_status)
}
inline void Expansion::_internal_add_edge_status(::valhalla::Expansion_EdgeStatus value) {
  edge_status_.Add(value);
}
inline void Expansion::add_edge_status(::valhalla::Expansion_EdgeStatus value) {
  // @@protoc_insertion_point(field_add:valhalla.Expansion.edge_status)
  _internal_add_edge_status(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Expansion::edge_status() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.edge_status)
  return edge_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Expansion::_internal_mutable_edge_status() {
  return &edge_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Expansion::mutable_edge_status() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.edge_status)
  return _internal_mutable_edge_status();
}

// repeated uint32 edge_id = 5 [packed = true];
inline int Expansion::_internal_edge_id_size() const {
  return edge_id_.size();
}
inline int Expansion::edge_id_size() const {
  return _internal_edge_id_size();
}
inline void Expansion::clear_edge_id() {
  edge_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::_internal_edge_id(int index) const {
  return edge_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.edge_id)
  return _internal_edge_id(index);
}
inline void Expansion::set_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.edge_id)
}
inline void Expansion::_internal_add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  edge_id_.Add(value);
}
inline void Expansion::add_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_edge_id(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.edge_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::_internal_edge_id() const {
  return edge_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::edge_id() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.edge_id)
  return _internal_edge_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::_internal_mutable_edge_id() {
  return &edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::mutable_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.edge_id)
  return _internal_mutable_edge_id();
}

// repeated uint32 pred_edge_id = 6 [packed = true];
inline int Expansion::_internal_pred_edge_id_size() const {
  return pred_edge_id_.size();
}
inline int Expansion::pred_edge_id_size() const {
  return _internal_pred_edge_id_size();
}
inline void Expansion::clear_pred_edge_id() {
  pred_edge_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::_internal_pred_edge_id(int index) const {
  return pred_edge_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Expansion::pred_edge_id(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.pred_edge_id)
  return _internal_pred_edge_id(index);
}
inline void Expansion::set_pred_edge_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pred_edge_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.pred_edge_id)
}
inline void Expansion::_internal_add_pred_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  pred_edge_id_.Add(value);
}
inline void Expansion::add_pred_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_pred_edge_id(value);
  // @@protoc_insertion_point(field_add:valhalla.Expansion.pred_edge_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::_internal_pred_edge_id() const {
  return pred_edge_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Expansion::pred_edge_id() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.pred_edge_id)
  return _internal_pred_edge_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::_internal_mutable_pred_edge_id() {
  return &pred_edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Expansion::mutable_pred_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.pred_edge_id)
  return _internal_mutable_pred_edge_id();
}

// repeated .valhalla.Expansion.ExpansionType expansion_type = 8;
inline int Expansion::_internal_expansion_type_size() const {
  return expansion_type_.size();
}
inline int Expansion::expansion_type_size() const {
  return _internal_expansion_type_size();
}
inline void Expansion::clear_expansion_type() {
  expansion_type_.Clear();
}
inline ::valhalla::Expansion_ExpansionType Expansion::_internal_expansion_type(int index) const {
  return static_cast< ::valhalla::Expansion_ExpansionType >(expansion_type_.Get(index));
}
inline ::valhalla::Expansion_ExpansionType Expansion::expansion_type(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.expansion_type)
  return _internal_expansion_type(index);
}
inline void Expansion::set_expansion_type(int index, ::valhalla::Expansion_ExpansionType value) {
  expansion_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Expansion.expansion_type)
}
inline void Expansion::_internal_add_expansion_type(::valhalla::Expansion_ExpansionType value) {
  expansion_type_.Add(value);
}
inline void Expansion::add_expansion_type(::valhalla::Expansion_ExpansionType value) {
  // @@protoc_insertion_point(field_add:valhalla.Expansion.expansion_type)
  _internal_add_expansion_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Expansion::expansion_type() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.expansion_type)
  return expansion_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Expansion::_internal_mutable_expansion_type() {
  return &expansion_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Expansion::mutable_expansion_type() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.expansion_type)
  return _internal_mutable_expansion_type();
}

// repeated .valhalla.Expansion.Geometry geometries = 7;
inline int Expansion::_internal_geometries_size() const {
  return geometries_.size();
}
inline int Expansion::geometries_size() const {
  return _internal_geometries_size();
}
inline void Expansion::clear_geometries() {
  geometries_.Clear();
}
inline ::valhalla::Expansion_Geometry* Expansion::mutable_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Expansion.geometries)
  return geometries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Expansion_Geometry >*
Expansion::mutable_geometries() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Expansion.geometries)
  return &geometries_;
}
inline const ::valhalla::Expansion_Geometry& Expansion::_internal_geometries(int index) const {
  return geometries_.Get(index);
}
inline const ::valhalla::Expansion_Geometry& Expansion::geometries(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Expansion.geometries)
  return _internal_geometries(index);
}
inline ::valhalla::Expansion_Geometry* Expansion::_internal_add_geometries() {
  return geometries_.Add();
}
inline ::valhalla::Expansion_Geometry* Expansion::add_geometries() {
  // @@protoc_insertion_point(field_add:valhalla.Expansion.geometries)
  return _internal_add_geometries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Expansion_Geometry >&
Expansion::geometries() const {
  // @@protoc_insertion_point(field_list:valhalla.Expansion.geometries)
  return geometries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::valhalla::Expansion_EdgeStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::valhalla::Expansion_ExpansionType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_expansion_2eproto
