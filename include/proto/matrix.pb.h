// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_matrix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_matrix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace valhalla {
class Matrix;
class MatrixDefaultTypeInternal;
extern MatrixDefaultTypeInternal _Matrix_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::Matrix* Arena::CreateMaybeMessage<::valhalla::Matrix>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

enum Matrix_Algorithm : int {
  Matrix_Algorithm_TimeDistanceMatrix = 0,
  Matrix_Algorithm_CostMatrix = 1,
  Matrix_Algorithm_TimeDistanceBSSMatrix = 2,
  Matrix_Algorithm_Matrix_Algorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Matrix_Algorithm_Matrix_Algorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Matrix_Algorithm_IsValid(int value);
constexpr Matrix_Algorithm Matrix_Algorithm_Algorithm_MIN = Matrix_Algorithm_TimeDistanceMatrix;
constexpr Matrix_Algorithm Matrix_Algorithm_Algorithm_MAX = Matrix_Algorithm_TimeDistanceBSSMatrix;
constexpr int Matrix_Algorithm_Algorithm_ARRAYSIZE = Matrix_Algorithm_Algorithm_MAX + 1;

const std::string& Matrix_Algorithm_Name(Matrix_Algorithm value);
template<typename T>
inline const std::string& Matrix_Algorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Matrix_Algorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Matrix_Algorithm_Name.");
  return Matrix_Algorithm_Name(static_cast<Matrix_Algorithm>(enum_t_value));
}
bool Matrix_Algorithm_Parse(
    const std::string& name, Matrix_Algorithm* value);
// ===================================================================

class Matrix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Matrix) */ {
 public:
  inline Matrix() : Matrix(nullptr) {};
  virtual ~Matrix();

  Matrix(const Matrix& from);
  Matrix(Matrix&& from) noexcept
    : Matrix() {
    *this = ::std::move(from);
  }

  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix& operator=(Matrix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Matrix* internal_default_instance() {
    return reinterpret_cast<const Matrix*>(
               &_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matrix& a, Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix* New() const final {
    return CreateMaybeMessage<Matrix>(nullptr);
  }

  Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Matrix";
  }
  protected:
  explicit Matrix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Matrix_Algorithm Algorithm;
  static constexpr Algorithm TimeDistanceMatrix =
    Matrix_Algorithm_TimeDistanceMatrix;
  static constexpr Algorithm CostMatrix =
    Matrix_Algorithm_CostMatrix;
  static constexpr Algorithm TimeDistanceBSSMatrix =
    Matrix_Algorithm_TimeDistanceBSSMatrix;
  static inline bool Algorithm_IsValid(int value) {
    return Matrix_Algorithm_IsValid(value);
  }
  static constexpr Algorithm Algorithm_MIN =
    Matrix_Algorithm_Algorithm_MIN;
  static constexpr Algorithm Algorithm_MAX =
    Matrix_Algorithm_Algorithm_MAX;
  static constexpr int Algorithm_ARRAYSIZE =
    Matrix_Algorithm_Algorithm_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Algorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Algorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Algorithm_Name.");
    return Matrix_Algorithm_Name(enum_t_value);
  }
  static inline bool Algorithm_Parse(const std::string& name,
      Algorithm* value) {
    return Matrix_Algorithm_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDistancesFieldNumber = 2,
    kTimesFieldNumber = 3,
    kFromIndicesFieldNumber = 4,
    kToIndicesFieldNumber = 5,
    kDateTimesFieldNumber = 6,
    kShapesFieldNumber = 8,
    kTimeZoneOffsetsFieldNumber = 9,
    kTimeZoneNamesFieldNumber = 10,
    kSecondPassFieldNumber = 11,
    kAlgorithmFieldNumber = 7,
  };
  // repeated uint32 distances = 2;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_distances(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_distances() const;
  void _internal_add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_distances();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 distances(int index) const;
  void set_distances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      distances() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_distances();

  // repeated float times = 3;
  int times_size() const;
  private:
  int _internal_times_size() const;
  public:
  void clear_times();
  private:
  float _internal_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_times() const;
  void _internal_add_times(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_times();
  public:
  float times(int index) const;
  void set_times(int index, float value);
  void add_times(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_times();

  // repeated uint32 from_indices = 4;
  int from_indices_size() const;
  private:
  int _internal_from_indices_size() const;
  public:
  void clear_from_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_from_indices() const;
  void _internal_add_from_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_from_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 from_indices(int index) const;
  void set_from_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_from_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      from_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_from_indices();

  // repeated uint32 to_indices = 5;
  int to_indices_size() const;
  private:
  int _internal_to_indices_size() const;
  public:
  void clear_to_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_to_indices() const;
  void _internal_add_to_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_to_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 to_indices(int index) const;
  void set_to_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_to_indices(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      to_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_to_indices();

  // repeated string date_times = 6;
  int date_times_size() const;
  private:
  int _internal_date_times_size() const;
  public:
  void clear_date_times();
  const std::string& date_times(int index) const;
  std::string* mutable_date_times(int index);
  void set_date_times(int index, const std::string& value);
  void set_date_times(int index, std::string&& value);
  void set_date_times(int index, const char* value);
  void set_date_times(int index, const char* value, size_t size);
  std::string* add_date_times();
  void add_date_times(const std::string& value);
  void add_date_times(std::string&& value);
  void add_date_times(const char* value);
  void add_date_times(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& date_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_date_times();
  private:
  const std::string& _internal_date_times(int index) const;
  std::string* _internal_add_date_times();
  public:

  // repeated string shapes = 8;
  int shapes_size() const;
  private:
  int _internal_shapes_size() const;
  public:
  void clear_shapes();
  const std::string& shapes(int index) const;
  std::string* mutable_shapes(int index);
  void set_shapes(int index, const std::string& value);
  void set_shapes(int index, std::string&& value);
  void set_shapes(int index, const char* value);
  void set_shapes(int index, const char* value, size_t size);
  std::string* add_shapes();
  void add_shapes(const std::string& value);
  void add_shapes(std::string&& value);
  void add_shapes(const char* value);
  void add_shapes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shapes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shapes();
  private:
  const std::string& _internal_shapes(int index) const;
  std::string* _internal_add_shapes();
  public:

  // repeated string time_zone_offsets = 9;
  int time_zone_offsets_size() const;
  private:
  int _internal_time_zone_offsets_size() const;
  public:
  void clear_time_zone_offsets();
  const std::string& time_zone_offsets(int index) const;
  std::string* mutable_time_zone_offsets(int index);
  void set_time_zone_offsets(int index, const std::string& value);
  void set_time_zone_offsets(int index, std::string&& value);
  void set_time_zone_offsets(int index, const char* value);
  void set_time_zone_offsets(int index, const char* value, size_t size);
  std::string* add_time_zone_offsets();
  void add_time_zone_offsets(const std::string& value);
  void add_time_zone_offsets(std::string&& value);
  void add_time_zone_offsets(const char* value);
  void add_time_zone_offsets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& time_zone_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_time_zone_offsets();
  private:
  const std::string& _internal_time_zone_offsets(int index) const;
  std::string* _internal_add_time_zone_offsets();
  public:

  // repeated string time_zone_names = 10;
  int time_zone_names_size() const;
  private:
  int _internal_time_zone_names_size() const;
  public:
  void clear_time_zone_names();
  const std::string& time_zone_names(int index) const;
  std::string* mutable_time_zone_names(int index);
  void set_time_zone_names(int index, const std::string& value);
  void set_time_zone_names(int index, std::string&& value);
  void set_time_zone_names(int index, const char* value);
  void set_time_zone_names(int index, const char* value, size_t size);
  std::string* add_time_zone_names();
  void add_time_zone_names(const std::string& value);
  void add_time_zone_names(std::string&& value);
  void add_time_zone_names(const char* value);
  void add_time_zone_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& time_zone_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_time_zone_names();
  private:
  const std::string& _internal_time_zone_names(int index) const;
  std::string* _internal_add_time_zone_names();
  public:

  // repeated bool second_pass = 11;
  int second_pass_size() const;
  private:
  int _internal_second_pass_size() const;
  public:
  void clear_second_pass();
  private:
  bool _internal_second_pass(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_second_pass() const;
  void _internal_add_second_pass(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_second_pass();
  public:
  bool second_pass(int index) const;
  void set_second_pass(int index, bool value);
  void add_second_pass(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      second_pass() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_second_pass();

  // .valhalla.Matrix.Algorithm algorithm = 7;
  void clear_algorithm();
  ::valhalla::Matrix_Algorithm algorithm() const;
  void set_algorithm(::valhalla::Matrix_Algorithm value);
  private:
  ::valhalla::Matrix_Algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::valhalla::Matrix_Algorithm value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.Matrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > distances_;
  mutable std::atomic<int> _distances_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > times_;
  mutable std::atomic<int> _times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > from_indices_;
  mutable std::atomic<int> _from_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > to_indices_;
  mutable std::atomic<int> _to_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> date_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shapes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> time_zone_offsets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> time_zone_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > second_pass_;
  mutable std::atomic<int> _second_pass_cached_byte_size_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_matrix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matrix

// repeated uint32 distances = 2;
inline int Matrix::_internal_distances_size() const {
  return distances_.size();
}
inline int Matrix::distances_size() const {
  return _internal_distances_size();
}
inline void Matrix::clear_distances() {
  distances_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::distances(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.distances)
  return _internal_distances(index);
}
inline void Matrix::set_distances(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distances_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.distances)
}
inline void Matrix::_internal_add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  distances_.Add(value);
}
inline void Matrix::add_distances(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_distances(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.distances)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::_internal_distances() const {
  return distances_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::distances() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.distances)
  return _internal_distances();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::_internal_mutable_distances() {
  return &distances_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.distances)
  return _internal_mutable_distances();
}

// repeated float times = 3;
inline int Matrix::_internal_times_size() const {
  return times_.size();
}
inline int Matrix::times_size() const {
  return _internal_times_size();
}
inline void Matrix::clear_times() {
  times_.Clear();
}
inline float Matrix::_internal_times(int index) const {
  return times_.Get(index);
}
inline float Matrix::times(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.times)
  return _internal_times(index);
}
inline void Matrix::set_times(int index, float value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.times)
}
inline void Matrix::_internal_add_times(float value) {
  times_.Add(value);
}
inline void Matrix::add_times(float value) {
  _internal_add_times(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::_internal_times() const {
  return times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Matrix::times() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.times)
  return _internal_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::_internal_mutable_times() {
  return &times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Matrix::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.times)
  return _internal_mutable_times();
}

// repeated uint32 from_indices = 4;
inline int Matrix::_internal_from_indices_size() const {
  return from_indices_.size();
}
inline int Matrix::from_indices_size() const {
  return _internal_from_indices_size();
}
inline void Matrix::clear_from_indices() {
  from_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::_internal_from_indices(int index) const {
  return from_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::from_indices(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.from_indices)
  return _internal_from_indices(index);
}
inline void Matrix::set_from_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  from_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.from_indices)
}
inline void Matrix::_internal_add_from_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  from_indices_.Add(value);
}
inline void Matrix::add_from_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_from_indices(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.from_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::_internal_from_indices() const {
  return from_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::from_indices() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.from_indices)
  return _internal_from_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::_internal_mutable_from_indices() {
  return &from_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::mutable_from_indices() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.from_indices)
  return _internal_mutable_from_indices();
}

// repeated uint32 to_indices = 5;
inline int Matrix::_internal_to_indices_size() const {
  return to_indices_.size();
}
inline int Matrix::to_indices_size() const {
  return _internal_to_indices_size();
}
inline void Matrix::clear_to_indices() {
  to_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::_internal_to_indices(int index) const {
  return to_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matrix::to_indices(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.to_indices)
  return _internal_to_indices(index);
}
inline void Matrix::set_to_indices(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  to_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.to_indices)
}
inline void Matrix::_internal_add_to_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  to_indices_.Add(value);
}
inline void Matrix::add_to_indices(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_to_indices(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.to_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::_internal_to_indices() const {
  return to_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Matrix::to_indices() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.to_indices)
  return _internal_to_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::_internal_mutable_to_indices() {
  return &to_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Matrix::mutable_to_indices() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.to_indices)
  return _internal_mutable_to_indices();
}

// repeated string date_times = 6;
inline int Matrix::_internal_date_times_size() const {
  return date_times_.size();
}
inline int Matrix::date_times_size() const {
  return _internal_date_times_size();
}
inline void Matrix::clear_date_times() {
  date_times_.Clear();
}
inline std::string* Matrix::add_date_times() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.date_times)
  return _internal_add_date_times();
}
inline const std::string& Matrix::_internal_date_times(int index) const {
  return date_times_.Get(index);
}
inline const std::string& Matrix::date_times(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.date_times)
  return _internal_date_times(index);
}
inline std::string* Matrix::mutable_date_times(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.date_times)
  return date_times_.Mutable(index);
}
inline void Matrix::set_date_times(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.date_times)
  date_times_.Mutable(index)->assign(value);
}
inline void Matrix::set_date_times(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.date_times)
  date_times_.Mutable(index)->assign(std::move(value));
}
inline void Matrix::set_date_times(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  date_times_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.date_times)
}
inline void Matrix::set_date_times(int index, const char* value, size_t size) {
  date_times_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.date_times)
}
inline std::string* Matrix::_internal_add_date_times() {
  return date_times_.Add();
}
inline void Matrix::add_date_times(const std::string& value) {
  date_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(std::string&& value) {
  date_times_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  date_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.date_times)
}
inline void Matrix::add_date_times(const char* value, size_t size) {
  date_times_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.date_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Matrix::date_times() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.date_times)
  return date_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Matrix::mutable_date_times() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.date_times)
  return &date_times_;
}

// .valhalla.Matrix.Algorithm algorithm = 7;
inline void Matrix::clear_algorithm() {
  algorithm_ = 0;
}
inline ::valhalla::Matrix_Algorithm Matrix::_internal_algorithm() const {
  return static_cast< ::valhalla::Matrix_Algorithm >(algorithm_);
}
inline ::valhalla::Matrix_Algorithm Matrix::algorithm() const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.algorithm)
  return _internal_algorithm();
}
inline void Matrix::_internal_set_algorithm(::valhalla::Matrix_Algorithm value) {
  
  algorithm_ = value;
}
inline void Matrix::set_algorithm(::valhalla::Matrix_Algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.algorithm)
}

// repeated string shapes = 8;
inline int Matrix::_internal_shapes_size() const {
  return shapes_.size();
}
inline int Matrix::shapes_size() const {
  return _internal_shapes_size();
}
inline void Matrix::clear_shapes() {
  shapes_.Clear();
}
inline std::string* Matrix::add_shapes() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.shapes)
  return _internal_add_shapes();
}
inline const std::string& Matrix::_internal_shapes(int index) const {
  return shapes_.Get(index);
}
inline const std::string& Matrix::shapes(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.shapes)
  return _internal_shapes(index);
}
inline std::string* Matrix::mutable_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.shapes)
  return shapes_.Mutable(index);
}
inline void Matrix::set_shapes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.shapes)
  shapes_.Mutable(index)->assign(value);
}
inline void Matrix::set_shapes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.shapes)
  shapes_.Mutable(index)->assign(std::move(value));
}
inline void Matrix::set_shapes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shapes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.shapes)
}
inline void Matrix::set_shapes(int index, const char* value, size_t size) {
  shapes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.shapes)
}
inline std::string* Matrix::_internal_add_shapes() {
  return shapes_.Add();
}
inline void Matrix::add_shapes(const std::string& value) {
  shapes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(std::string&& value) {
  shapes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shapes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.shapes)
}
inline void Matrix::add_shapes(const char* value, size_t size) {
  shapes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.shapes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Matrix::shapes() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.shapes)
  return shapes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Matrix::mutable_shapes() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.shapes)
  return &shapes_;
}

// repeated string time_zone_offsets = 9;
inline int Matrix::_internal_time_zone_offsets_size() const {
  return time_zone_offsets_.size();
}
inline int Matrix::time_zone_offsets_size() const {
  return _internal_time_zone_offsets_size();
}
inline void Matrix::clear_time_zone_offsets() {
  time_zone_offsets_.Clear();
}
inline std::string* Matrix::add_time_zone_offsets() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.time_zone_offsets)
  return _internal_add_time_zone_offsets();
}
inline const std::string& Matrix::_internal_time_zone_offsets(int index) const {
  return time_zone_offsets_.Get(index);
}
inline const std::string& Matrix::time_zone_offsets(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.time_zone_offsets)
  return _internal_time_zone_offsets(index);
}
inline std::string* Matrix::mutable_time_zone_offsets(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.time_zone_offsets)
  return time_zone_offsets_.Mutable(index);
}
inline void Matrix::set_time_zone_offsets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_offsets)
  time_zone_offsets_.Mutable(index)->assign(value);
}
inline void Matrix::set_time_zone_offsets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_offsets)
  time_zone_offsets_.Mutable(index)->assign(std::move(value));
}
inline void Matrix::set_time_zone_offsets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  time_zone_offsets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::set_time_zone_offsets(int index, const char* value, size_t size) {
  time_zone_offsets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.time_zone_offsets)
}
inline std::string* Matrix::_internal_add_time_zone_offsets() {
  return time_zone_offsets_.Add();
}
inline void Matrix::add_time_zone_offsets(const std::string& value) {
  time_zone_offsets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(std::string&& value) {
  time_zone_offsets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  time_zone_offsets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.time_zone_offsets)
}
inline void Matrix::add_time_zone_offsets(const char* value, size_t size) {
  time_zone_offsets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.time_zone_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Matrix::time_zone_offsets() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.time_zone_offsets)
  return time_zone_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Matrix::mutable_time_zone_offsets() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.time_zone_offsets)
  return &time_zone_offsets_;
}

// repeated string time_zone_names = 10;
inline int Matrix::_internal_time_zone_names_size() const {
  return time_zone_names_.size();
}
inline int Matrix::time_zone_names_size() const {
  return _internal_time_zone_names_size();
}
inline void Matrix::clear_time_zone_names() {
  time_zone_names_.Clear();
}
inline std::string* Matrix::add_time_zone_names() {
  // @@protoc_insertion_point(field_add_mutable:valhalla.Matrix.time_zone_names)
  return _internal_add_time_zone_names();
}
inline const std::string& Matrix::_internal_time_zone_names(int index) const {
  return time_zone_names_.Get(index);
}
inline const std::string& Matrix::time_zone_names(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.time_zone_names)
  return _internal_time_zone_names(index);
}
inline std::string* Matrix::mutable_time_zone_names(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Matrix.time_zone_names)
  return time_zone_names_.Mutable(index);
}
inline void Matrix::set_time_zone_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_names)
  time_zone_names_.Mutable(index)->assign(value);
}
inline void Matrix::set_time_zone_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:valhalla.Matrix.time_zone_names)
  time_zone_names_.Mutable(index)->assign(std::move(value));
}
inline void Matrix::set_time_zone_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  time_zone_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:valhalla.Matrix.time_zone_names)
}
inline void Matrix::set_time_zone_names(int index, const char* value, size_t size) {
  time_zone_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:valhalla.Matrix.time_zone_names)
}
inline std::string* Matrix::_internal_add_time_zone_names() {
  return time_zone_names_.Add();
}
inline void Matrix::add_time_zone_names(const std::string& value) {
  time_zone_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(std::string&& value) {
  time_zone_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  time_zone_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:valhalla.Matrix.time_zone_names)
}
inline void Matrix::add_time_zone_names(const char* value, size_t size) {
  time_zone_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:valhalla.Matrix.time_zone_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Matrix::time_zone_names() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.time_zone_names)
  return time_zone_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Matrix::mutable_time_zone_names() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.time_zone_names)
  return &time_zone_names_;
}

// repeated bool second_pass = 11;
inline int Matrix::_internal_second_pass_size() const {
  return second_pass_.size();
}
inline int Matrix::second_pass_size() const {
  return _internal_second_pass_size();
}
inline void Matrix::clear_second_pass() {
  second_pass_.Clear();
}
inline bool Matrix::_internal_second_pass(int index) const {
  return second_pass_.Get(index);
}
inline bool Matrix::second_pass(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Matrix.second_pass)
  return _internal_second_pass(index);
}
inline void Matrix::set_second_pass(int index, bool value) {
  second_pass_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Matrix.second_pass)
}
inline void Matrix::_internal_add_second_pass(bool value) {
  second_pass_.Add(value);
}
inline void Matrix::add_second_pass(bool value) {
  _internal_add_second_pass(value);
  // @@protoc_insertion_point(field_add:valhalla.Matrix.second_pass)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Matrix::_internal_second_pass() const {
  return second_pass_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
Matrix::second_pass() const {
  // @@protoc_insertion_point(field_list:valhalla.Matrix.second_pass)
  return _internal_second_pass();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Matrix::_internal_mutable_second_pass() {
  return &second_pass_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
Matrix::mutable_second_pass() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Matrix.second_pass)
  return _internal_mutable_second_pass();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::valhalla::Matrix_Algorithm> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_matrix_2eproto
