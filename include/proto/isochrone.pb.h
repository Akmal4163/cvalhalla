// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: isochrone.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_isochrone_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_isochrone_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace valhalla {
class Isochrone;
class IsochroneDefaultTypeInternal;
extern IsochroneDefaultTypeInternal _Isochrone_default_instance_;
class Isochrone_Contour;
class Isochrone_ContourDefaultTypeInternal;
extern Isochrone_ContourDefaultTypeInternal _Isochrone_Contour_default_instance_;
class Isochrone_Geometry;
class Isochrone_GeometryDefaultTypeInternal;
extern Isochrone_GeometryDefaultTypeInternal _Isochrone_Geometry_default_instance_;
class Isochrone_Interval;
class Isochrone_IntervalDefaultTypeInternal;
extern Isochrone_IntervalDefaultTypeInternal _Isochrone_Interval_default_instance_;
}  // namespace valhalla
PROTOBUF_NAMESPACE_OPEN
template<> ::valhalla::Isochrone* Arena::CreateMaybeMessage<::valhalla::Isochrone>(Arena*);
template<> ::valhalla::Isochrone_Contour* Arena::CreateMaybeMessage<::valhalla::Isochrone_Contour>(Arena*);
template<> ::valhalla::Isochrone_Geometry* Arena::CreateMaybeMessage<::valhalla::Isochrone_Geometry>(Arena*);
template<> ::valhalla::Isochrone_Interval* Arena::CreateMaybeMessage<::valhalla::Isochrone_Interval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace valhalla {

enum Isochrone_metric_type : int {
  Isochrone_metric_type_time = 0,
  Isochrone_metric_type_distance = 1,
  Isochrone_metric_type_Isochrone_metric_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Isochrone_metric_type_Isochrone_metric_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Isochrone_metric_type_IsValid(int value);
constexpr Isochrone_metric_type Isochrone_metric_type_metric_type_MIN = Isochrone_metric_type_time;
constexpr Isochrone_metric_type Isochrone_metric_type_metric_type_MAX = Isochrone_metric_type_distance;
constexpr int Isochrone_metric_type_metric_type_ARRAYSIZE = Isochrone_metric_type_metric_type_MAX + 1;

const std::string& Isochrone_metric_type_Name(Isochrone_metric_type value);
template<typename T>
inline const std::string& Isochrone_metric_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Isochrone_metric_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Isochrone_metric_type_Name.");
  return Isochrone_metric_type_Name(static_cast<Isochrone_metric_type>(enum_t_value));
}
bool Isochrone_metric_type_Parse(
    const std::string& name, Isochrone_metric_type* value);
// ===================================================================

class Isochrone_Geometry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Geometry) */ {
 public:
  inline Isochrone_Geometry() : Isochrone_Geometry(nullptr) {};
  virtual ~Isochrone_Geometry();

  Isochrone_Geometry(const Isochrone_Geometry& from);
  Isochrone_Geometry(Isochrone_Geometry&& from) noexcept
    : Isochrone_Geometry() {
    *this = ::std::move(from);
  }

  inline Isochrone_Geometry& operator=(const Isochrone_Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Geometry& operator=(Isochrone_Geometry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Isochrone_Geometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Isochrone_Geometry* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Geometry*>(
               &_Isochrone_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Isochrone_Geometry& a, Isochrone_Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Geometry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Geometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Isochrone_Geometry* New() const final {
    return CreateMaybeMessage<Isochrone_Geometry>(nullptr);
  }

  Isochrone_Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Isochrone_Geometry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Isochrone_Geometry& from);
  void MergeFrom(const Isochrone_Geometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Isochrone_Geometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Isochrone.Geometry";
  }
  protected:
  explicit Isochrone_Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordsFieldNumber = 1,
  };
  // repeated sint32 coords = 1 [packed = true];
  int coords_size() const;
  private:
  int _internal_coords_size() const;
  public:
  void clear_coords();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coords(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_coords() const;
  void _internal_add_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_coords();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 coords(int index) const;
  void set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_coords(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      coords() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_coords();

  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Geometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > coords_;
  mutable std::atomic<int> _coords_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_isochrone_2eproto;
};
// -------------------------------------------------------------------

class Isochrone_Contour PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Contour) */ {
 public:
  inline Isochrone_Contour() : Isochrone_Contour(nullptr) {};
  virtual ~Isochrone_Contour();

  Isochrone_Contour(const Isochrone_Contour& from);
  Isochrone_Contour(Isochrone_Contour&& from) noexcept
    : Isochrone_Contour() {
    *this = ::std::move(from);
  }

  inline Isochrone_Contour& operator=(const Isochrone_Contour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Contour& operator=(Isochrone_Contour&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Isochrone_Contour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Isochrone_Contour* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Contour*>(
               &_Isochrone_Contour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Isochrone_Contour& a, Isochrone_Contour& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Contour* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Contour* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Isochrone_Contour* New() const final {
    return CreateMaybeMessage<Isochrone_Contour>(nullptr);
  }

  Isochrone_Contour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Isochrone_Contour>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Isochrone_Contour& from);
  void MergeFrom(const Isochrone_Contour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Isochrone_Contour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Isochrone.Contour";
  }
  protected:
  explicit Isochrone_Contour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometriesFieldNumber = 2,
  };
  // repeated .valhalla.Isochrone.Geometry geometries = 2;
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;
  public:
  void clear_geometries();
  ::valhalla::Isochrone_Geometry* mutable_geometries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Geometry >*
      mutable_geometries();
  private:
  const ::valhalla::Isochrone_Geometry& _internal_geometries(int index) const;
  ::valhalla::Isochrone_Geometry* _internal_add_geometries();
  public:
  const ::valhalla::Isochrone_Geometry& geometries(int index) const;
  ::valhalla::Isochrone_Geometry* add_geometries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Geometry >&
      geometries() const;

  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Contour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Geometry > geometries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_isochrone_2eproto;
};
// -------------------------------------------------------------------

class Isochrone_Interval PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone.Interval) */ {
 public:
  inline Isochrone_Interval() : Isochrone_Interval(nullptr) {};
  virtual ~Isochrone_Interval();

  Isochrone_Interval(const Isochrone_Interval& from);
  Isochrone_Interval(Isochrone_Interval&& from) noexcept
    : Isochrone_Interval() {
    *this = ::std::move(from);
  }

  inline Isochrone_Interval& operator=(const Isochrone_Interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone_Interval& operator=(Isochrone_Interval&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Isochrone_Interval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Isochrone_Interval* internal_default_instance() {
    return reinterpret_cast<const Isochrone_Interval*>(
               &_Isochrone_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Isochrone_Interval& a, Isochrone_Interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone_Interval* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone_Interval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Isochrone_Interval* New() const final {
    return CreateMaybeMessage<Isochrone_Interval>(nullptr);
  }

  Isochrone_Interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Isochrone_Interval>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Isochrone_Interval& from);
  void MergeFrom(const Isochrone_Interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Isochrone_Interval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Isochrone.Interval";
  }
  protected:
  explicit Isochrone_Interval(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContoursFieldNumber = 3,
    kMetricFieldNumber = 1,
    kMetricValueFieldNumber = 2,
  };
  // repeated .valhalla.Isochrone.Contour contours = 3;
  int contours_size() const;
  private:
  int _internal_contours_size() const;
  public:
  void clear_contours();
  ::valhalla::Isochrone_Contour* mutable_contours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Contour >*
      mutable_contours();
  private:
  const ::valhalla::Isochrone_Contour& _internal_contours(int index) const;
  ::valhalla::Isochrone_Contour* _internal_add_contours();
  public:
  const ::valhalla::Isochrone_Contour& contours(int index) const;
  ::valhalla::Isochrone_Contour* add_contours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Contour >&
      contours() const;

  // .valhalla.Isochrone.metric_type metric = 1;
  void clear_metric();
  ::valhalla::Isochrone_metric_type metric() const;
  void set_metric(::valhalla::Isochrone_metric_type value);
  private:
  ::valhalla::Isochrone_metric_type _internal_metric() const;
  void _internal_set_metric(::valhalla::Isochrone_metric_type value);
  public:

  // float metric_value = 2;
  void clear_metric_value();
  float metric_value() const;
  void set_metric_value(float value);
  private:
  float _internal_metric_value() const;
  void _internal_set_metric_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:valhalla.Isochrone.Interval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Contour > contours_;
  int metric_;
  float metric_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_isochrone_2eproto;
};
// -------------------------------------------------------------------

class Isochrone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:valhalla.Isochrone) */ {
 public:
  inline Isochrone() : Isochrone(nullptr) {};
  virtual ~Isochrone();

  Isochrone(const Isochrone& from);
  Isochrone(Isochrone&& from) noexcept
    : Isochrone() {
    *this = ::std::move(from);
  }

  inline Isochrone& operator=(const Isochrone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Isochrone& operator=(Isochrone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Isochrone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Isochrone* internal_default_instance() {
    return reinterpret_cast<const Isochrone*>(
               &_Isochrone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Isochrone& a, Isochrone& b) {
    a.Swap(&b);
  }
  inline void Swap(Isochrone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Isochrone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Isochrone* New() const final {
    return CreateMaybeMessage<Isochrone>(nullptr);
  }

  Isochrone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Isochrone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Isochrone& from);
  void MergeFrom(const Isochrone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Isochrone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "valhalla.Isochrone";
  }
  protected:
  explicit Isochrone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Isochrone_Geometry Geometry;
  typedef Isochrone_Contour Contour;
  typedef Isochrone_Interval Interval;

  typedef Isochrone_metric_type metric_type;
  static constexpr metric_type time =
    Isochrone_metric_type_time;
  static constexpr metric_type distance =
    Isochrone_metric_type_distance;
  static inline bool metric_type_IsValid(int value) {
    return Isochrone_metric_type_IsValid(value);
  }
  static constexpr metric_type metric_type_MIN =
    Isochrone_metric_type_metric_type_MIN;
  static constexpr metric_type metric_type_MAX =
    Isochrone_metric_type_metric_type_MAX;
  static constexpr int metric_type_ARRAYSIZE =
    Isochrone_metric_type_metric_type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& metric_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, metric_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function metric_type_Name.");
    return Isochrone_metric_type_Name(enum_t_value);
  }
  static inline bool metric_type_Parse(const std::string& name,
      metric_type* value) {
    return Isochrone_metric_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 1,
  };
  // repeated .valhalla.Isochrone.Interval intervals = 1;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;
  public:
  void clear_intervals();
  ::valhalla::Isochrone_Interval* mutable_intervals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Interval >*
      mutable_intervals();
  private:
  const ::valhalla::Isochrone_Interval& _internal_intervals(int index) const;
  ::valhalla::Isochrone_Interval* _internal_add_intervals();
  public:
  const ::valhalla::Isochrone_Interval& intervals(int index) const;
  ::valhalla::Isochrone_Interval* add_intervals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Interval >&
      intervals() const;

  // @@protoc_insertion_point(class_scope:valhalla.Isochrone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Interval > intervals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_isochrone_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Isochrone_Geometry

// repeated sint32 coords = 1 [packed = true];
inline int Isochrone_Geometry::_internal_coords_size() const {
  return coords_.size();
}
inline int Isochrone_Geometry::coords_size() const {
  return _internal_coords_size();
}
inline void Isochrone_Geometry::clear_coords() {
  coords_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Isochrone_Geometry::_internal_coords(int index) const {
  return coords_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Isochrone_Geometry::coords(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Geometry.coords)
  return _internal_coords(index);
}
inline void Isochrone_Geometry::set_coords(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  coords_.Set(index, value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Geometry.coords)
}
inline void Isochrone_Geometry::_internal_add_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  coords_.Add(value);
}
inline void Isochrone_Geometry::add_coords(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_coords(value);
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Geometry.coords)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Isochrone_Geometry::_internal_coords() const {
  return coords_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Isochrone_Geometry::coords() const {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Geometry.coords)
  return _internal_coords();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Isochrone_Geometry::_internal_mutable_coords() {
  return &coords_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Isochrone_Geometry::mutable_coords() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Geometry.coords)
  return _internal_mutable_coords();
}

// -------------------------------------------------------------------

// Isochrone_Contour

// repeated .valhalla.Isochrone.Geometry geometries = 2;
inline int Isochrone_Contour::_internal_geometries_size() const {
  return geometries_.size();
}
inline int Isochrone_Contour::geometries_size() const {
  return _internal_geometries_size();
}
inline void Isochrone_Contour::clear_geometries() {
  geometries_.Clear();
}
inline ::valhalla::Isochrone_Geometry* Isochrone_Contour::mutable_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.Contour.geometries)
  return geometries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Geometry >*
Isochrone_Contour::mutable_geometries() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Contour.geometries)
  return &geometries_;
}
inline const ::valhalla::Isochrone_Geometry& Isochrone_Contour::_internal_geometries(int index) const {
  return geometries_.Get(index);
}
inline const ::valhalla::Isochrone_Geometry& Isochrone_Contour::geometries(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Contour.geometries)
  return _internal_geometries(index);
}
inline ::valhalla::Isochrone_Geometry* Isochrone_Contour::_internal_add_geometries() {
  return geometries_.Add();
}
inline ::valhalla::Isochrone_Geometry* Isochrone_Contour::add_geometries() {
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Contour.geometries)
  return _internal_add_geometries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Geometry >&
Isochrone_Contour::geometries() const {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Contour.geometries)
  return geometries_;
}

// -------------------------------------------------------------------

// Isochrone_Interval

// .valhalla.Isochrone.metric_type metric = 1;
inline void Isochrone_Interval::clear_metric() {
  metric_ = 0;
}
inline ::valhalla::Isochrone_metric_type Isochrone_Interval::_internal_metric() const {
  return static_cast< ::valhalla::Isochrone_metric_type >(metric_);
}
inline ::valhalla::Isochrone_metric_type Isochrone_Interval::metric() const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.metric)
  return _internal_metric();
}
inline void Isochrone_Interval::_internal_set_metric(::valhalla::Isochrone_metric_type value) {
  
  metric_ = value;
}
inline void Isochrone_Interval::set_metric(::valhalla::Isochrone_metric_type value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Interval.metric)
}

// float metric_value = 2;
inline void Isochrone_Interval::clear_metric_value() {
  metric_value_ = 0;
}
inline float Isochrone_Interval::_internal_metric_value() const {
  return metric_value_;
}
inline float Isochrone_Interval::metric_value() const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.metric_value)
  return _internal_metric_value();
}
inline void Isochrone_Interval::_internal_set_metric_value(float value) {
  
  metric_value_ = value;
}
inline void Isochrone_Interval::set_metric_value(float value) {
  _internal_set_metric_value(value);
  // @@protoc_insertion_point(field_set:valhalla.Isochrone.Interval.metric_value)
}

// repeated .valhalla.Isochrone.Contour contours = 3;
inline int Isochrone_Interval::_internal_contours_size() const {
  return contours_.size();
}
inline int Isochrone_Interval::contours_size() const {
  return _internal_contours_size();
}
inline void Isochrone_Interval::clear_contours() {
  contours_.Clear();
}
inline ::valhalla::Isochrone_Contour* Isochrone_Interval::mutable_contours(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.Interval.contours)
  return contours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Contour >*
Isochrone_Interval::mutable_contours() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.Interval.contours)
  return &contours_;
}
inline const ::valhalla::Isochrone_Contour& Isochrone_Interval::_internal_contours(int index) const {
  return contours_.Get(index);
}
inline const ::valhalla::Isochrone_Contour& Isochrone_Interval::contours(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.Interval.contours)
  return _internal_contours(index);
}
inline ::valhalla::Isochrone_Contour* Isochrone_Interval::_internal_add_contours() {
  return contours_.Add();
}
inline ::valhalla::Isochrone_Contour* Isochrone_Interval::add_contours() {
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.Interval.contours)
  return _internal_add_contours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Contour >&
Isochrone_Interval::contours() const {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.Interval.contours)
  return contours_;
}

// -------------------------------------------------------------------

// Isochrone

// repeated .valhalla.Isochrone.Interval intervals = 1;
inline int Isochrone::_internal_intervals_size() const {
  return intervals_.size();
}
inline int Isochrone::intervals_size() const {
  return _internal_intervals_size();
}
inline void Isochrone::clear_intervals() {
  intervals_.Clear();
}
inline ::valhalla::Isochrone_Interval* Isochrone::mutable_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:valhalla.Isochrone.intervals)
  return intervals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Interval >*
Isochrone::mutable_intervals() {
  // @@protoc_insertion_point(field_mutable_list:valhalla.Isochrone.intervals)
  return &intervals_;
}
inline const ::valhalla::Isochrone_Interval& Isochrone::_internal_intervals(int index) const {
  return intervals_.Get(index);
}
inline const ::valhalla::Isochrone_Interval& Isochrone::intervals(int index) const {
  // @@protoc_insertion_point(field_get:valhalla.Isochrone.intervals)
  return _internal_intervals(index);
}
inline ::valhalla::Isochrone_Interval* Isochrone::_internal_add_intervals() {
  return intervals_.Add();
}
inline ::valhalla::Isochrone_Interval* Isochrone::add_intervals() {
  // @@protoc_insertion_point(field_add:valhalla.Isochrone.intervals)
  return _internal_add_intervals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::valhalla::Isochrone_Interval >&
Isochrone::intervals() const {
  // @@protoc_insertion_point(field_list:valhalla.Isochrone.intervals)
  return intervals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace valhalla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::valhalla::Isochrone_metric_type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_isochrone_2eproto
